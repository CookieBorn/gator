// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follow_feeds.sql

package database

import (
	"context"
	"time"
)

const createFollowFeeds = `-- name: CreateFollowFeeds :one
WITH inserted_feed_follow as (INSERT INTO feed_follows (id, created_at, updated_at, feed_id, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)RETURNING id, created_at, updated_at, feed_id, user_id)

SELECT
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.feed_id, inserted_feed_follow.user_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feed_follow
INNER JOIN users
ON user_id=users.id
INNER JOIN feeds
ON feed_id=feeds.id
`

type CreateFollowFeedsParams struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    int32
}

type CreateFollowFeedsRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    int32
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFollowFeeds(ctx context.Context, arg CreateFollowFeedsParams) (CreateFollowFeedsRow, error) {
	row := q.db.QueryRowContext(ctx, createFollowFeeds,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.UserID,
	)
	var i CreateFollowFeedsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE from feed_follows
WHERE user_id = $1 and feed_id = $2
`

type DeleteFeedFollowParams struct {
	UserID int32
	FeedID int32
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const getFollowFeeds = `-- name: GetFollowFeeds :many
SELECT
    feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_id, feed_follows.user_id, users.id, users.created_at, users.updated_at, users.name, feeds.id, feeds.created_at, feeds.updated_at, feeds.name, url, feeds.user_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM feed_follows
INNER JOIN users
ON user_id=users.id
INNER JOIN feeds
ON feed_id=feeds.id
WHERE feed_follows.user_id=$1
`

type GetFollowFeedsRow struct {
	ID          int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
	FeedID      int32
	UserID      int32
	ID_2        int32
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	Name        string
	ID_3        int32
	CreatedAt_3 time.Time
	UpdatedAt_3 time.Time
	Name_2      string
	Url         string
	UserID_2    int32
	FeedName    string
	UserName    string
}

func (q *Queries) GetFollowFeeds(ctx context.Context, userID int32) ([]GetFollowFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowFeedsRow
	for rows.Next() {
		var i GetFollowFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
			&i.Url,
			&i.UserID_2,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
